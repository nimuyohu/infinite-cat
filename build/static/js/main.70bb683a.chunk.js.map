{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","classes","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","useStyles","useState","list","setList","hasMore","setHasMore","loadMore","page","a","fetch","response","json","data","length","items","className","GridList","cellHeight","cols","map","value","key","GridListTile","src","url","alt","Skeleton","variant","height","loader","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RA2EeA,MApEf,WACE,IAYMC,EAZYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,SACVC,gBAAiBN,EAAMO,QAAQC,WAAWC,OAE5CC,SAAU,CACRC,MAAO,QAGKC,GAbH,EAgBWC,mBAAS,IAhBpB,mBAgBNC,EAhBM,KAgBAC,EAhBA,OAkBiBF,oBAAS,GAlB1B,mBAkBNG,EAlBM,KAkBGC,EAlBH,KAqBPC,EAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEAGQC,MAAM,8CAHd,cAGTC,EAHS,gBAIIA,EAASC,OAJb,aAITC,EAJS,QAONC,OAAS,GAPH,uBAQbR,GAAW,GARE,0BAafF,EAAQ,GAAD,mBAAKD,GAAL,YAAcU,KAbN,4CAAH,sDAiBRE,EACJ,qBAAKC,UAAW7B,EAAQG,KAAxB,SACA,cAAC2B,EAAA,EAAD,CAAUC,WAAY,IAAKF,UAAW7B,EAAQY,SAAUoB,KAAM,EAA9D,SACGhB,EAAKiB,KAAI,SAACC,EAAMC,GAAP,OACR,eAACC,EAAA,EAAD,WACI,qBAAKC,IAAKH,EAAMI,IAAKC,IAAI,OAAWJ,GACpC,cAACK,EAAA,EAAD,CAAUC,QAAQ,OAAO5B,MAAO,IAAK6B,OAAQ,QAF9BR,EAAMI,YAWvBK,EAAQ,qBAAKd,UAAU,UAAc,GAE3C,OACE,8BACA,eAAC,IAAD,CACET,SAAUA,EACVF,QAASA,EACTyB,OAAQA,EAHV,mBAKKf,EALL,sBCpDSgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.70bb683a.chunk.js","sourcesContent":["import {useState} from 'react';\nimport InfiniteScroll  from \"react-infinite-scroller\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nfunction App() {\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n      width: 500,\n    },\n  }));\n  const classes = useStyles();\n  \n  // 表示するデータ\n  const [list, setList] = useState([]);\n  // 再読み込み判定\n  const [hasMore, setHasMore] = useState(true);\n\n  // データ読み込むときのコールバック\n  const loadMore = async (page) => {\n\n    // 猫ちゃんの画像API呼び出し\n    const response = await fetch('https://api.thecatapi.com/v1/images/search');  //API通信\n    const data = await response.json();  //取得データ\n\n    //データ件数が0件の場合、処理終了\n    if (data.length < 1) {\n      setHasMore(false);\n      return;\n    }\n\n    //取得データをリストに追加\n    setList([...list, ...data])\n  }\n\n  //各スクロール要素\n  const items = (\n    <div className={classes.root}>\n    <GridList cellHeight={200} className={classes.gridList} cols={3}>\n      {list.map((value,key) => (\n        <GridListTile key={value.url}>\n            <img src={value.url} alt='cat' key={key}/>\n            <Skeleton variant=\"rect\" width={210} height={500} />\n        </GridListTile>\n      ))}\n    </GridList>\n    \n    </div>\n    );\n    \n    //ロード中に表示する項目\n    const loader =<div className=\"loader\" key={0}></div>;\n    \n    return (\n      <div>\n      <InfiniteScroll\n        loadMore={loadMore}    //項目を読み込む際に処理するコールバック関数\n        hasMore={hasMore}      //読み込みを行うかどうかの判定\n        loader={loader}\n        >      {/* 読み込み最中に表示する項目 */}\n          {items}             {/* 無限スクロールで表示する項目 */}\n      </InfiniteScroll>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}