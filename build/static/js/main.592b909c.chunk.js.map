{"version":3,"sources":["ElevationScroll.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ElevationScroll","props","children","window","trigger","useScrollTrigger","disableHysteresis","threshold","target","undefined","React","cloneElement","elevation","ElevateAppBar","Fragment","CssBaseline","AppBar","Toolbar","Typography","variant","Container","App","classes","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","useStyles","useState","list","setList","hasMore","setHasMore","loadMore","page","a","fetch","response","json","data","length","items","className","GridList","cellHeight","cols","map","value","index","GridListTile","src","url","alt","Skeleton","height","loader","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qVASA,SAASA,EAAgBC,GAAQ,IACrBC,EAAqBD,EAArBC,SAAUC,EAAWF,EAAXE,OAIZC,EAAUC,YAAiB,CAC7BC,mBAAmB,EACnBC,UAAW,EACXC,OAAQL,EAASA,SAAWM,IAGhC,OAAOC,IAAMC,aAAaT,EAAU,CAChCU,UAAWR,EAAU,EAAI,IAalB,SAASS,EAAcZ,GAClC,OACI,eAAC,IAAMa,SAAP,WACI,cAACC,EAAA,EAAD,IACA,cAACf,EAAD,2BAAqBC,GAArB,aACI,cAACe,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,qHAIZ,cAACF,EAAA,EAAD,IACA,cAACG,EAAA,EAAD,OC+BGC,MApEf,WACE,IAYMC,EAZYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,SACVC,gBAAiBN,EAAMO,QAAQC,WAAWC,OAE5CC,SAAU,CACRC,MAAO,QAGKC,GAbH,EAgBWC,mBAAS,IAhBpB,mBAgBNC,EAhBM,KAgBAC,EAhBA,OAkBiBF,oBAAS,GAlB1B,mBAkBNG,EAlBM,KAkBGC,EAlBH,KAqBPC,EAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEAGQC,MAAM,8CAHd,cAGTC,EAHS,gBAIIA,EAASC,OAJb,aAITC,EAJS,QAONC,OAAS,GAPH,uBAQbR,GAAW,GARE,0BAafF,EAAQ,GAAD,mBAAKD,GAAL,YAAcU,KAbN,4CAAH,sDAiBRE,EACJ,sBAAKC,UAAW7B,EAAQG,KAAxB,UACE,cAAC,EAAD,IACA,cAAC2B,EAAA,EAAD,CAAUC,WAAY,IAAKF,UAAW7B,EAAQY,SAAUoB,KAAM,EAA9D,SACGhB,EAAKiB,KAAI,SAACC,EAAOC,GAAR,OACR,eAACC,EAAA,EAAD,WACE,qBAAKC,IAAKH,EAAMI,IAAKC,IAAI,OAAWJ,GACpC,cAACK,EAAA,EAAD,CAAU3C,QAAQ,OAAO4C,OAAQ,QAFhBN,WAUrBO,EAAS,qBAAKb,UAAU,UAAc,GAE5C,OACE,8BACE,eAAC,IAAD,CACET,SAAUA,EACVF,QAASA,EACTwB,OAAQA,EAHV,mBAKGd,EALH,sBCtDSe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxD,EAAA,EAAD,UACA,cAAC,EAAD,QAGFyD,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.592b909c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport Container from '@material-ui/core/Container';\n\nfunction ElevationScroll(props) {\n    const { children, window } = props;\n    // Note that you normally won't need to set the window ref as useScrollTrigger\n    // will default to window.\n    // This is only being set here because the demo is in an iframe.\n    const trigger = useScrollTrigger({\n        disableHysteresis: true,\n        threshold: 0,\n        target: window ? window() : undefined,\n    });\n\n    return React.cloneElement(children, {\n        elevation: trigger ? 4 : 0,\n    });\n}\n\nElevationScroll.propTypes = {\n    children: PropTypes.element.isRequired,\n    /**\n     * Injected by the documentation to work in an iframe.\n     * You won't need it on your project.\n     */\n    window: PropTypes.func,\n};\n\nexport default function ElevateAppBar(props) {\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <ElevationScroll {...props}>\n                <AppBar>\n                    <Toolbar>\n                        <Typography variant=\"h6\">無限スクロールで猫が見れるサイト</Typography>\n                    </Toolbar>\n                </AppBar>\n            </ElevationScroll>\n            <Toolbar />\n            <Container></Container>\n        </React.Fragment>\n    );\n}\n","import { useState } from 'react';\nimport InfiniteScroll from \"react-infinite-scroller\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport ElevationScroll from './ElevationScroll';\n\n\nfunction App() {\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n      width: 800,\n    },\n  }));\n  const classes = useStyles();\n\n  // 表示するデータ\n  const [list, setList] = useState([]);\n  // 再読み込み判定\n  const [hasMore, setHasMore] = useState(true);\n\n  // データ読み込むときのコールバック\n  const loadMore = async (page) => {\n\n    // 猫ちゃんの画像API呼び出し\n    const response = await fetch('https://api.thecatapi.com/v1/images/search');  //API通信\n    const data = await response.json();  //取得データ\n\n    //データ件数が0件の場合、処理終了\n    if (data.length < 1) {\n      setHasMore(false);\n      return;\n    }\n\n    //取得データをリストに追加\n    setList([...list, ...data])\n  }\n\n  //各スクロール要素\n  const items = (\n    <div className={classes.root}>\n      <ElevationScroll />\n      <GridList cellHeight={200} className={classes.gridList} cols={3}>\n        {list.map((value, index) => (\n          <GridListTile key={index}>\n            <img src={value.url} alt='cat' key={index} />\n            <Skeleton variant=\"rect\" height={500} />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  );\n\n  //ロード中に表示する項目\n  const loader = <div className=\"loader\" key={0}></div>;\n\n  return (\n    <div>\n      <InfiniteScroll\n        loadMore={loadMore}    //項目を読み込む際に処理するコールバック関数\n        hasMore={hasMore}      //読み込みを行うかどうかの判定\n        loader={loader}\n      >      {/* 読み込み最中に表示する項目 */}\n        {items}             {/* 無限スクロールで表示する項目 */}\n      </InfiniteScroll>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Container from '@material-ui/core/Container';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Container>\n    <App />\n    </Container>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}